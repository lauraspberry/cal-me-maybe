"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usePermissions = usePermissions;

var _react = require("react");

var _expoPermissions = require("expo-permissions");

/**
 * Get or ask permission for protected functionality within the app.
 * It returns the permission response after fetching or asking it.
 * The hook fetches the permissions when rendered, by default.
 * To ask the user permission, use the `askPermission` callback or `ask` option.
 *
 * @see https://docs.expo.io/versions/latest/sdk/permissions/
 * @example const [permission, askPermission, getPermission] = usePermissions(...);
 */
function usePermissions(type, options = {}) {
  const [data, setData] = (0, _react.useState)();
  const types = Array.isArray(type) ? type : [type];
  const {
    ask = false,
    get = true
  } = options; // note: its intentional to listen to `type`, not `types`.
  // when `type` is casted to an array, it possible creates a new one on every render.
  // to prevent unnecessary function instances we need to listen to the "raw" value.

  const askPermissions = (0, _react.useCallback)(() => (0, _expoPermissions.askAsync)(...types).then(setData), [type]); // eslint-disable-line react-hooks/exhaustive-deps

  const getPermissions = (0, _react.useCallback)(() => (0, _expoPermissions.getAsync)(...types).then(setData), [type]); // eslint-disable-line react-hooks/exhaustive-deps

  (0, _react.useEffect)(() => {
    if (ask) {
      askPermissions();
    }

    if (!ask && get) {
      getPermissions();
    }
  }, [ask, askPermissions, get, getPermissions]);
  return [data, askPermissions, getPermissions];
}
//# sourceMappingURL=use-permissions.js.map