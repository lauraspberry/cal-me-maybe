{"version":3,"sources":["use-permissions.ts"],"names":["usePermissions","type","options","data","setData","types","Array","isArray","ask","get","askPermissions","then","getPermissions"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;;;;;;;;AASO,SAASA,cAAT,CACNC,IADM,EAENC,OAA2B,GAAG,EAFxB,EAOL;AACD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkB,sBAAxB;AACA,QAAMC,KAAK,GAAGC,KAAK,CAACC,OAAN,CAAcN,IAAd,IAAsBA,IAAtB,GAA6B,CAACA,IAAD,CAA3C;AACA,QAAM;AACLO,IAAAA,GAAG,GAAG,KADD;AAELC,IAAAA,GAAG,GAAG;AAFD,MAGFP,OAHJ,CAHC,CAQD;AACA;AACA;;AAEA,QAAMQ,cAAc,GAAG,wBAAY,MAClC,+BAAS,GAAGL,KAAZ,EAAmBM,IAAnB,CAAwBP,OAAxB,CADsB,EAEpB,CAACH,IAAD,CAFoB,CAAvB,CAZC,CAcW;;AAEZ,QAAMW,cAAc,GAAG,wBAAY,MAClC,+BAAS,GAAGP,KAAZ,EAAmBM,IAAnB,CAAwBP,OAAxB,CADsB,EAEpB,CAACH,IAAD,CAFoB,CAAvB,CAhBC,CAkBW;;AAEZ,wBAAU,MAAM;AACf,QAAIO,GAAJ,EAAS;AACRE,MAAAA,cAAc;AACd;;AAED,QAAI,CAACF,GAAD,IAAQC,GAAZ,EAAiB;AAChBG,MAAAA,cAAc;AACd;AACD,GARD,EAQG,CAACJ,GAAD,EAAME,cAAN,EAAsBD,GAAtB,EAA2BG,cAA3B,CARH;AAUA,SAAO,CAACT,IAAD,EAAOO,cAAP,EAAuBE,cAAvB,CAAP;AACA","sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { PermissionType, PermissionResponse, askAsync, getAsync } from 'expo-permissions';\n\n/**\n * Get or ask permission for protected functionality within the app.\n * It returns the permission response after fetching or asking it.\n * The hook fetches the permissions when rendered, by default.\n * To ask the user permission, use the `askPermission` callback or `ask` option.\n *\n * @see https://docs.expo.io/versions/latest/sdk/permissions/\n * @example const [permission, askPermission, getPermission] = usePermissions(...);\n */\nexport function usePermissions(\n\ttype: PermissionType | PermissionType[],\n\toptions: PermissionsOptions = {},\n): [\n\tPermissionResponse | undefined,\n\t() => Promise<void>,\n\t() => Promise<void>,\n] {\n\tconst [data, setData] = useState<PermissionResponse>();\n\tconst types = Array.isArray(type) ? type : [type];\n\tconst {\n\t\task = false,\n\t\tget = true,\n\t} = options;\n\n\t// note: its intentional to listen to `type`, not `types`.\n\t// when `type` is casted to an array, it possible creates a new one on every render.\n\t// to prevent unnecessary function instances we need to listen to the \"raw\" value.\n\n\tconst askPermissions = useCallback(() => (\n\t\taskAsync(...types).then(setData)\n\t), [type]); // eslint-disable-line react-hooks/exhaustive-deps\n\n\tconst getPermissions = useCallback(() => (\n\t\tgetAsync(...types).then(setData)\n\t), [type]); // eslint-disable-line react-hooks/exhaustive-deps\n\n\tuseEffect(() => {\n\t\tif (ask) {\n\t\t\taskPermissions();\n\t\t}\n\n\t\tif (!ask && get) {\n\t\t\tgetPermissions();\n\t\t}\n\t}, [ask, askPermissions, get, getPermissions]);\n\n\treturn [data, askPermissions, getPermissions];\n}\n\nexport interface PermissionsOptions {\n\t/** If it should ask the permissions when mounted, defaults to `false` */\n\task?: boolean;\n\t/** If it should fetch information about the permissions when mounted, defaults to `true` */\n\tget?: boolean;\n}\n"]}