{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport View from \"react-native-web/dist/exports/View\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport PermissionsAndroid from \"react-native-web/dist/exports/PermissionsAndroid\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport MapView, { AnimatedRegion, Circle, Callout, Marker, PROVIDER_GOOGLE } from 'react-native-maps';\nimport * as Permissions from 'expo-permissions';\nimport * as Location from 'expo-location';\nimport * as TaskManager from 'expo-task-manager';\nimport { ConsoleLogger, Reachability } from '@aws-amplify/core';\nimport { useEffect, useState } from \"react\";\nimport { setStatusBarNetworkActivityIndicatorVisible } from 'expo-status-bar';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function MapScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _React$useState = React.useState({\n    latitude: 37.78,\n    longitude: -122.43\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      position = _React$useState2[0],\n      setPosition = _React$useState2[1];\n\n  var _React$useState3 = React.useState({\n    latitude: 37.78,\n    longitude: -122.43\n  }),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      destination = _React$useState4[0],\n      setDestination = _React$useState4[1];\n\n  var fields = {\n    positionLatitude: 37.78,\n    positionLongitude: -122.43,\n    destinationLatitude: 37.78,\n    destinationLongitude: -122.43\n  };\n  React.useEffect(function () {\n    (function _callee() {\n      var _await$Location$reque, status, location;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Location.requestForegroundPermissionsAsync());\n\n            case 2:\n              _await$Location$reque = _context.sent;\n              status = _await$Location$reque.status;\n\n              if (!(status !== \"granted\")) {\n                _context.next = 7;\n                break;\n              }\n\n              setErrorMsg(\"Permission to access location was denied.\");\n              return _context.abrupt(\"return\");\n\n            case 7:\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({}));\n\n            case 9:\n              location = _context.sent;\n              setPosition({\n                latitude: location.coords.latitude,\n                longitude: location.coords.longitude\n              });\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  function startWalk() {\n    return _regeneratorRuntime.async(function startWalk$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            console.log(destination);\n            fields.destinationLatitude = destination.latitude;\n            fields.destinationLongitude = destination.longitude;\n            fields.positionLatitude = position.latitude;\n            fields.positionLongitude = position.longitude;\n            navigation.navigate('Time Screen', {\n              paramKey: fields\n            });\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  return _jsxs(SafeAreaView, {\n    style: styles.container,\n    children: [_jsx(MapView, {\n      style: styles.map,\n      provider: PROVIDER_GOOGLE,\n      initialRegion: {\n        latitude: position.latitude,\n        longitude: position.longitude,\n        latitudeDelta: 0.0922,\n        longitudeDelta: 0.0421\n      },\n      showsUserLocation: true,\n      followsUserLocation: true,\n      onUserLocationChange: function onUserLocationChange(e) {\n        setPosition({\n          latitude: e.nativeEvent.coordinate.latitude,\n          longitude: e.nativeEvent.coordinate.longitude\n        });\n      },\n      onPress: function onPress(e) {\n        setDestination({\n          latitude: e.nativeEvent.coordinate.latitude,\n          longitude: e.nativeEvent.coordinate.longitude\n        });\n      },\n      children: _jsx(Marker, {\n        coordinate: {\n          latitude: destination.latitude,\n          longitude: destination.longitude\n        },\n        pinColor: \"red\",\n        children: _jsx(Callout, {\n          children: _jsx(Text, {\n            children: \" Destination. \"\n          })\n        })\n      })\n    }), _jsx(View, {\n      style: styles.separator,\n      children: _jsx(Button, {\n        title: \"Start\",\n        onPress: startWalk\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  switchContainer: {\n    flexDirection: \"row\",\n    alignItems: \"center\"\n  },\n  separator: {\n    position: \"absolute\",\n    marginVertical: 8,\n    backgroundColor: \"#fff\",\n    bottom: 0\n  },\n  map: {\n    width: Dimensions.get('window').width,\n    height: Dimensions.get('window').height\n  }\n});","map":{"version":3,"sources":["/Users/studypei/Files/Code/CalMeMaybe copy/src/screens/Map.js"],"names":["React","Component","render","MapView","AnimatedRegion","Circle","Callout","Marker","PROVIDER_GOOGLE","Permissions","Location","TaskManager","ConsoleLogger","Reachability","useEffect","useState","setStatusBarNetworkActivityIndicatorVisible","NavigationContainer","MapScreen","navigation","latitude","longitude","position","setPosition","destination","setDestination","fields","positionLatitude","positionLongitude","destinationLatitude","destinationLongitude","requestForegroundPermissionsAsync","status","setErrorMsg","getCurrentPositionAsync","location","coords","startWalk","console","log","navigate","paramKey","styles","container","map","latitudeDelta","longitudeDelta","e","nativeEvent","coordinate","separator","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","switchContainer","flexDirection","marginVertical","bottom","width","Dimensions","get","height"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport { Platform, View, SafeAreaView, Text, Button, TouchableOpacity, PermissionsAndroid, StyleSheet, Dimensions } from 'react-native';\nimport MapView, { AnimatedRegion, Circle, Callout, Marker, PROVIDER_GOOGLE } from 'react-native-maps'; \nimport * as Permissions from 'expo-permissions';\nimport * as Location from 'expo-location';\nimport * as TaskManager from 'expo-task-manager';\nimport { ConsoleLogger, Reachability } from '@aws-amplify/core';\n\nimport { useEffect, useState } from \"react\";\nimport { setStatusBarNetworkActivityIndicatorVisible } from 'expo-status-bar';\nimport { NavigationContainer } from '@react-navigation/native';\n\n\nexport default function MapScreen({ navigation }) {\n  // Define position state: {latitude: number, longitude: number}\n  const [position, setPosition] = React.useState({\n    latitude: 37.78,\n    longitude: -122.43,\n  });\n  const [destination, setDestination] = React.useState({\n    latitude: 37.78,\n    longitude: -122.43,\n  });\n\n  const fields = {\n    positionLatitude: 37.78,\n    positionLongitude: -122.43,\n    destinationLatitude: 37.78,\n    destinationLongitude: -122.43,\n}\n\n  React.useEffect(() => {\n    (async () => {\n      let {status} = await Location.requestForegroundPermissionsAsync();\n      if (status !== \"granted\") {\n        setErrorMsg(\"Permission to access location was denied.\")\n        return;\n      }\n\n      let location = await Location.getCurrentPositionAsync({});\n      setPosition({\n        latitude: location.coords.latitude,\n        longitude: location.coords.longitude,\n      });\n    })();\n  }, []);\n\n  async function startWalk() {\n    console.log(destination);\n    fields.destinationLatitude = destination.latitude;\n    fields.destinationLongitude = destination.longitude;\n    fields.positionLatitude = position.latitude;\n    fields.positionLongitude = position.longitude;\n    navigation.navigate('Time Screen', {\n        paramKey: fields,\n    })\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <MapView\n        style = {styles.map}\n        provider = {PROVIDER_GOOGLE} \n        initialRegion = {{\n            latitude: position.latitude,\n            longitude: position.longitude,\n            latitudeDelta: 0.0922,\n            longitudeDelta: 0.0421\n        }}\n        showsUserLocation = {true}\n        followsUserLocation = {true}\n        onUserLocationChange = {(e) => {\n          setPosition({\n            latitude: e.nativeEvent.coordinate.latitude,\n            longitude: e.nativeEvent.coordinate.longitude,\n          });\n        }}\n        onPress = {(e) => {\n          setDestination({\n            latitude: e.nativeEvent.coordinate.latitude,\n            longitude: e.nativeEvent.coordinate.longitude,\n          });\n        }}\n      >\n        <Marker\n          coordinate = {{\n            latitude: destination.latitude,\n            longitude: destination.longitude,\n          }}\n          pinColor = \"red\"\n        >\n          <Callout>\n            <Text> Destination. </Text>\n          </Callout>\n        </Marker>\n      </MapView>\n      <View style = {styles.separator}>\n        <Button title=\"Start\" onPress = {startWalk}/>\n      </View>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  switchContainer: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  separator: {\n    position: \"absolute\",\n    marginVertical: 8,\n    backgroundColor: \"#fff\",\n    bottom: 0,\n  },\n  map: {\n    width: Dimensions.get('window').width,\n    height: Dimensions.get('window').height,\n  },\n})"]},"metadata":{},"sourceType":"module"}