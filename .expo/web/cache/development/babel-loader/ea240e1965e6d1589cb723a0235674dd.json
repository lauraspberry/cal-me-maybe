{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from 'react';\nimport 'react-native-gesture-handler';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { NavigationContainer, DrawerActions, getFocusedRouteNameFromRoute } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport LandingScreen from \"./screens/Landing.js\";\nimport HomeScreen from \"./screens/Home.js\";\nimport LoginScreen from \"./screens/Login.js\";\nimport SignUpScreen from \"./screens/SignUp.js\";\nimport ConfirmScreen from \"./screens/Confirm.js\";\nimport MapScreen from \"./screens/Map.js\";\nimport WalkScreen from \"./screens/Walk.js\";\nimport TimeScreen from \"./screens/Time.js\";\nimport Friend from \"./screens/Friends.js\";\nimport Profile from \"./screens/Profile.js\";\nimport CompletedScreen from \"./screens/Completed.js\";\nimport Alerts from \"./screens/Alerts.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar RootStack = createStackNavigator();\nvar Drawer = createDrawerNavigator();\n\nvar App = function App() {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isAuthenticated = _React$useState2[0],\n      setIsAuthenticated = _React$useState2[1];\n\n  var _React$useState3 = React.useState(\"\"),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      email = _React$useState4[0],\n      onChangeEmail = _React$useState4[1];\n\n  var _React$useState5 = React.useState(\"\"),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      password = _React$useState6[0],\n      onChangePass = _React$useState6[1];\n\n  var fields = {\n    Email: email,\n    Password: password,\n    ChangeEmail: onChangeEmail,\n    ChangePass: onChangePass\n  };\n\n  var handleSignOut = function handleSignOut() {\n    Auth.signOut();\n    setIsAuthenticated(false);\n  };\n\n  var HomeDrawer = function HomeDrawer() {\n    return _jsxs(Drawer.Navigator, {\n      children: [_jsx(Drawer.Screen, {\n        name: \"Home\",\n        component: HomeScreen,\n        options: {\n          headerShown: false\n        }\n      }), _jsx(Drawer.Screen, {\n        name: \"Profile\",\n        options: {\n          headerShown: false\n        },\n        children: function children(props) {\n          return _jsx(Profile, _objectSpread(_objectSpread({}, props), {}, {\n            vars: fields\n          }));\n        }\n      }), _jsx(Drawer.Screen, {\n        name: \"Add Friends\",\n        component: Friend,\n        options: {\n          headerShown: false\n        },\n        vars: fields\n      }), _jsx(Drawer.Screen, {\n        name: \"Alerts\",\n        component: Alerts,\n        options: {\n          headerShown: false\n        }\n      }), _jsx(Drawer.Screen, {\n        name: \"Map\",\n        component: MapScreen,\n        options: {\n          headerShown: false\n        }\n      })]\n    });\n  };\n\n  return _jsx(NavigationContainer, {\n    children: _jsx(RootStack.Navigator, {\n      children: isAuthenticated ? _jsxs(_Fragment, {\n        children: [_jsx(RootStack.Screen, {\n          name: \"Home Drawer\",\n          component: HomeDrawer,\n          options: function options(_ref) {\n            var route = _ref.route,\n                navigation = _ref.navigation;\n            return {\n              headerTitle: getFocusedRouteNameFromRoute(route),\n              headerLeft: function headerLeft() {\n                return _jsx(Button, {\n                  onPress: function onPress() {\n                    return navigation.dispatch(DrawerActions.toggleDrawer());\n                  },\n                  title: \"Menu\"\n                });\n              },\n              headerRight: function headerRight() {\n                return _jsx(Button, {\n                  onPress: handleSignOut,\n                  title: \"Sign Out\"\n                });\n              }\n            };\n          }\n        }), _jsx(RootStack.Screen, {\n          name: \"Time Screen\",\n          component: TimeScreen\n        }), _jsx(RootStack.Screen, {\n          name: \"Walk Screen\",\n          component: WalkScreen\n        }), _jsx(RootStack.Screen, {\n          name: \"Completed Screen\",\n          component: CompletedScreen\n        })]\n      }) : _jsxs(_Fragment, {\n        children: [_jsx(RootStack.Screen, {\n          name: \"Cal Me Maybe\",\n          component: LandingScreen,\n          options: {\n            animationTypeForReplace: 'pop'\n          }\n        }), _jsx(RootStack.Screen, {\n          name: \"Sign In\",\n          children: function children(props) {\n            return _jsx(LoginScreen, _objectSpread(_objectSpread({}, props), {}, {\n              LogIn: setIsAuthenticated,\n              params: fields\n            }));\n          }\n        }), _jsx(RootStack.Screen, {\n          name: \"Sign Up\",\n          children: function children(props) {\n            return _jsx(SignUpScreen, _objectSpread(_objectSpread({}, props), {}, {\n              LogIn: setIsAuthenticated,\n              params: fields\n            }));\n          }\n        }), _jsx(RootStack.Screen, {\n          name: \"Confirm Screen\",\n          children: function children(props) {\n            return _jsx(ConfirmScreen, _objectSpread(_objectSpread({}, props), {}, {\n              LogIn: setIsAuthenticated\n            }));\n          }\n        })]\n      })\n    })\n  });\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/studypei/Files/Code/CalMeMaybe copy/src/App.js"],"names":["React","NavigationContainer","DrawerActions","getFocusedRouteNameFromRoute","createStackNavigator","createDrawerNavigator","LandingScreen","HomeScreen","LoginScreen","SignUpScreen","ConfirmScreen","MapScreen","WalkScreen","TimeScreen","Friend","Profile","CompletedScreen","Alerts","RootStack","Drawer","App","useState","isAuthenticated","setIsAuthenticated","email","onChangeEmail","password","onChangePass","fields","Email","Password","ChangeEmail","ChangePass","handleSignOut","Auth","signOut","HomeDrawer","headerShown","props","route","navigation","headerTitle","headerLeft","dispatch","toggleDrawer","headerRight","animationTypeForReplace"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport 'react-native-gesture-handler';\nimport { Button } from 'react-native';\nimport { NavigationContainer, DrawerActions, getFocusedRouteNameFromRoute } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\n\n\n//import { Auth } from \"aws-amplify\";\n\nimport LandingScreen from './screens/Landing.js'; \nimport HomeScreen from './screens/Home.js';\nimport LoginScreen from './screens/Login.js';\nimport SignUpScreen from './screens/SignUp.js';\nimport ConfirmScreen from './screens/Confirm.js';\nimport MapScreen from './screens/Map.js'\nimport WalkScreen from './screens/Walk.js'\nimport TimeScreen from './screens/Time.js';\nimport Friend from './screens/Friends.js';\nimport Profile from './screens/Profile.js';\nimport CompletedScreen from './screens/Completed.js';\nimport Alerts from './screens/Alerts.js';\n\nconst RootStack = createStackNavigator();\n\nconst Drawer = createDrawerNavigator();\n\nconst App = () => {\n    \n    const [isAuthenticated, setIsAuthenticated] = React.useState(false);\n    \n    const [email, onChangeEmail] = React.useState(\"\");\n    const [password, onChangePass] = React.useState(\"\");\n\n    const fields = {\n        Email: email,\n        Password: password,\n        ChangeEmail: onChangeEmail,\n        ChangePass: onChangePass,\n    }\n\n    // const handleSignUp = ({ navigation }) => {\n    //     navigation.navigate(ConfirmScreen);\n    // }\n\n    const handleSignOut = () => {\n        //implement actual sign out\n        Auth.signOut();\n        setIsAuthenticated(false);\n    }\n\n    const HomeDrawer = () => {\n        return (\n            <Drawer.Navigator>\n                <Drawer.Screen name = \"Home\" component = {HomeScreen} options = {{ headerShown: false }} />\n                <Drawer.Screen name = \"Profile\" options = {{ headerShown: false }}>\n                            {(props) => (\n                                <Profile {...props} vars = {fields} />\n                            )}\n                </Drawer.Screen> \n                <Drawer.Screen name = \"Add Friends\" component = {Friend} options = {{ headerShown: false }} vars = {fields}/>\n                <Drawer.Screen name = \"Alerts\" component = {Alerts} options = {{ headerShown: false }} />\n                <Drawer.Screen name = \"Map\" component = {MapScreen} options = {{ headerShown: false }}/>\n            </Drawer.Navigator>\n        );\n    }; \n\n    return ( \n    <NavigationContainer> \n        <RootStack.Navigator>\n            {isAuthenticated ? (\n                <>\n                <RootStack.Screen \n                            name = \"Home Drawer\" \n                            component = {HomeDrawer}\n                            options = { ({ route, navigation }) => ({\n                                headerTitle: getFocusedRouteNameFromRoute(route),\n                                headerLeft: () => (\n                                    <Button\n                                        onPress = {() =>\n                                            navigation.dispatch(DrawerActions.toggleDrawer())\n                                        }\n                                        title = \"Menu\"\n                                    />\n                                ),\n                                headerRight: () => (\n                                    <Button onPress = {handleSignOut} title = \"Sign Out\" />\n                                ),\n                            })}\n                />\n                <RootStack.Screen name = \"Time Screen\" component = {TimeScreen} />\n                <RootStack.Screen name = \"Walk Screen\" component = {WalkScreen} />\n                <RootStack.Screen name = \"Completed Screen\" component = {CompletedScreen} />\n                </>\n            ) : (\n                <>\n                <RootStack.Screen \n                    name = \"Cal Me Maybe\" \n                    component = {LandingScreen} \n                    options = {{\n                        animationTypeForReplace: 'pop'\n                    }}\n                />\n                <RootStack.Screen name = \"Sign In\">\n                    {(props) => (\n                        <LoginScreen {...props} LogIn = { setIsAuthenticated } params = {fields} />\n                    )}\n                </RootStack.Screen> \n                <RootStack.Screen name = \"Sign Up\">\n                    {(props) => (\n                        <SignUpScreen {...props} LogIn = { setIsAuthenticated } params = {fields} />\n                    )}\n                </RootStack.Screen>\n                <RootStack.Screen name = \"Confirm Screen\">\n                    {(props) => (\n                        <ConfirmScreen {...props} LogIn = { setIsAuthenticated } />\n                    )}\n                </RootStack.Screen>\n                </>\n            )}\n        </RootStack.Navigator>\n    </NavigationContainer>\n    );\n};\nexport default App;"]},"metadata":{},"sourceType":"module"}